 model Uber

abstract class Person
attributes
	name: String
	email: String
	password: String
    phoneNumber: Integer
operations
	login()
    checkCredentials()
end

class User < Person
attributes
	paymentMethod: String
operations
	selectPaymentMethod()
	pay()
	setupRide()
	ride()
	inputLoadDetails()
	trackLoad()
    startScootBike()
    createComplaint()
    makeOrder()
    receiveOrder()
    respondToRideRequest()
    rateDriver()
    endRide()
    photographParking()
    scanQRCode()
end

class Driver < Person
attributes
    driverLicense: String
    paymentMethod: String
    rating: Integer
operations
    respondToRideRequest()
    pickupUser()
    driveToDestination()
    pickupDelivery()
    postTruck()
    takePictureOfConfirmation()
    deliverLoad()
    callSupport()
    bookLoad()
    researchLoad()
    loadsAvailable()
    receiveBookConfirmation()
end

class UberScootBikeWorker < Person
operations 
    rechargeScootsAndBikes()
end

class UberEatsEmployee < Person
attributes
    driverLicense: String
operations
    respondToOrder()
    pickupFood()
    deliverOrder()
    confirmOrder()
end

class Restaurant
attributes
    restaurantName: String
operations
    setOrder()
    deliverFood()
    confirmOrder()
end

class Receiver
attributes
    name: String
    cargId: Integer
operations
    receiveLoad()
end

class BankEntity
attributes
    accbalance: Real
operations
    pay()
    selectPaymentMethod()
end

class Time
attributes
  hour : Integer
  minute : Integer
  second : Integer
operations
    pay()
    selectPaymentMethod()
end

class Location
attributes
    streetName: String
    latitude: Real
    longitude: Real
    county: String
end

class ScootBike
attributes
    qrCode : Integer
    battery : Integer
    minBattery: Integer
end

class Car
attributes
	licensePlate: String
	weightCapacity: Integer
end

--Associations
associationclass rides between
  User [1] role user
  Driver [1] role driver
attributes
  duration : Integer
  cost: Integer
  tip : Integer
  startLocation: String
  destination: String
end

association located_at between
    rides [1] role ride
    Location [2] role locations
end

association user_addr between
    User[1] role user
    Location[1] role user_loc
end

association restaurant_addr between
    Restaurant[1] role restaurant
    Location[1] role restaurant_loc
end

associationclass transports between
    Driver [1] role driver
    Receiver [1] role receiver
attributes
    weight : Integer
    receiverName: String
    end

association delivers between
    UberEatsEmployee[1..*] role deliverPerson
    Restaurant[1..*] role restaurant
end

associationclass deliversEat between
    UberEatsEmployee[1] role driverEats
    User[1] role user
    attributes
        tip : Integer
        location: Location
end

associationclass Withdraw between
    BankEntity[1] role bank
    Time[1] role clock
    attributes
        transferTime: Time
        amount : Integer
end

association account between
    BankEntity[1] role bank
   Person[1] role person 
end

association uses between
    User[1] role user
    ScootBike[1] role bike_scoot
end

association recharge between
    UberScootBikeWorker[1] role worker
    ScootBike[1] role bike_scoot
end

association carBelongs between
	Driver [1] role driver
	Car[1] role car
end

--Invariants
constraints


context Person
    inv uniquePerson: 
        Person.allInstances() -> forAll(x,y| x<>y implies x.email <> y.email)

context deliversEat
    inv collect_location:
        self.location.streetName = self.user.user_loc.streetName
    inv tip_threshold:
        self.tip >= 0 and self.tip <= 10

    inv same_county:
        self.driverEats.restaurant.restaurant_loc.county -> includes(self.user.user_loc.county)

context Withdraw
    inv enought_money:
        self.amount <= self.bank.accbalance

context rides
    inv different_start_destination: 
        self.startLocation <> self.destination

context Driver
    inv uniquePlate: 
    	Driver.allInstances() -> forAll(x,y| x<>y implies x.car.licensePlate <> y.car.licensePlate)

context ScootBike
    inv battery:
        self.battery <= 100 and self.battery >= 0
    inv diffQR:
        ScootBike.allInstances() -> forAll(x,y| x<>y implies x.qrCode <> y.qrCode)
        
context Time
    inv time_limits:
        self.hour <= 23 and self.hour >= 0 and self.minute <= 60 and self.minute >= 0 and self.second <= 60 and self.second >= 0
		
context transports
	inv enoughWeightCapacity:
		self.weight <= self.driver.car.weightCapacity
	inv correctReceiver:
		self.receiverName = self.receiver.name
		
context Receiver
	inv diffCargId:
		Receiver.allInstances() -> forAll(x,y | x<>y implies x.cargId <> y.cargId)
        
context rides
    inv user_driver_not_same_person:
        self.user.email <> self.driver.email

context Car
    inv sameLicensePlate:
        self.licensePlate = driver.car.licensePlate
    
context UberScootBikeWorker
    inv can_recharge_if:
        self.bike_scoot.battery < self.bike_scoot.minBattery